# This GitHub Actions workflow, named 'Equinix-Metal-Actions-All-Demo', 
# It is designed to create a temporary project on Equinix Metal, 
# Creates a device in that project and run selfhosted runner script for linktoqr github repo
# Finally delete the project and device. 

# The workflow is triggered manually using the workflow_dispatch event.
name: 'Equinix-Metal-Selfhosted-Runner-Setup'

on:
  workflow_dispatch:

jobs:
  create-self-hosted-runner:
    runs-on: ubuntu-latest
    steps:
    - name: Print ENV vars
      run: |
        export GITHUB_SHA=$(echo $GITHUB_SHA)

        echo "GitHub SHA: $GITHUB_SHA"
        echo "GitHub Ref: $GITHUB_REF"
        echo "GitHub Event Name: $GITHUB_EVENT_NAME"
        echo "GitHub Repository: $GITHUB_REPOSITORY"
        echo "GitHub Workflow: $GITHUB_WORKFLOW"
        echo "GitHub Action: $GITHUB_ACTION"
        echo "GitHub Actor: $GITHUB_ACTOR"
        echo "GitHub Workflow Run ID: $GITHUB_RUN_ID"
        echo "GitHub Workflow Run Number: $GITHUB_RUN_NUMBER"
        echo "GitHub Workflow Run Attempt: $GITHUB_RUN_ATTEMPT"
        echo "GitHub Event Path: $GITHUB_EVENT_PATH"
        echo "GitHub Workspace: $GITHUB_WORKSPACE"
        echo "GitHub Server URL: $GITHUB_SERVER_URL"
        echo "GitHub API URL: $GITHUB_API_URL"
        echo "GitHub GraphQL URL: $GITHUB_GRAPHQL_URL"
        echo "GitHub Actions URL: $GITHUB_ACTIONS"
        echo "GitHub Runner OS: $RUNNER_OS"
        echo "GitHub Runner Temp: $RUNNER_TEMP"
        echo "GitHub Runner Tool Cache: $RUNNER_TOOL_CACHE"
        echo "GitHub Runner Workspace: $RUNNER_WORKSPACE"
  
    - name: Create temporary project
      id: metal-project
      uses: equinix-labs/metal-project-action@main
      with:
        userToken: ${{ secrets.METAL_AUTH_TOKEN }}
        projectName: "$GITHUB_SHA"

    - name: Create device in temporary project
      id: metal-device
      uses: equinix-labs/metal-device-action@main
      continue-on-error: true
      with:
        metal_auth_token: ${{ steps.metal-project.outputs.projectToken }}
        metal_project_id: ${{ steps.metal-project.outputs.projectID }}
        metro: da
        plan: m3.small.x86
        os: ubuntu_22_04
        user_data: |
            # Download
            # Create a folder
            $ mkdir actions-runner && cd actions-runner# Download the latest runner package
            $ curl -o actions-runner-linux-x64-2.313.0.tar.gz -L https://github.com/actions/runner/releases/download/v2.313.0/actions-runner-linux-x64-2.313.0.tar.gz# Optional: Validate the hash
            $ echo "56910d6628b41f99d9a1c5fe9df54981ad5d8c9e42fc14899dcc177e222e71c4  actions-runner-linux-x64-2.313.0.tar.gz" | shasum -a 256 -c# Extract the installer
            $ tar xzf ./actions-runner-linux-x64-2.313.0.tar.gz
            # Configure
            # Create the runner and start the configuration experience
            $ ./config.sh --url https://github.com/chefgs/linktoqr --token AB2A3GXKLIKGPIBLVCUIT2DFZYGSK# Last step, run it!
            $ ./run.sh
#    - name: SSH into Metal Device and Display CloudInit Logs
#      run: |
#        ssh -o StrictHostKeyChecking=no -tt root@$${{ steps.metal-device.outputs.ipaddress }} 'sudo cat /var/log/cloud-init-output.log && exit'
    - name: Delete temporary project & device
      uses: equinix-labs/metal-sweeper-action@main
      with:
        authToken: ${{ secrets.METAL_AUTH_TOKEN }}
        projectID: ${{ steps.metal-project.outputs.projectID }}
        keepProject: false

# We have to go to the respective github repo in which we need to setup the selfhosted runner
# Create new runner and then copy the runner setup script available in new runner setup page
# Paste it into the user_data section of the metal device creation step
# Finally use the workflow syntax runs-on: self-hosted to run the workflow in metal self hosted instance. 
# Finally delete the project, as it is demo. In case of real-time scenario skip the deletion part in this workflow